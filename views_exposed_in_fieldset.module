<?php
// $Id$

/**
 * @file
 * Implementation of necessary hooks and module helper functions.
 */

/**
 * Implementation of hook_form_alter().
 */
function views_exposed_in_fieldset_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && arg(1) != 'build' && arg(2) != 'views') {  
    // Add the CSS file.
    drupal_add_css(drupal_get_path('module', 'views_exposed_in_fieldset') . '/css/views-exposed-in-fieldset.css', 'module');
    
    // New fieldset element to be built.
    $fieldset = $form_id . '_fieldset';
    
    // Get those fieldkeys we need to move.
    $fields = _views_exposed_in_fieldset_refine($form, $form_id);

    // Build the new fieldset.
    $form[$fieldset] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter Results'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    // Move the keys to the new fieldset.
    foreach ($fields as $field) {
      $form[$fieldset][$field] = $form[$field];
      unset($form[$field]);
    }
    
    // Move field labels from [#info] array and flush.
    foreach ($form['#info'] as $key => $info) {
      $form[$fieldset][$info['value']]['#title'] = $form[$fieldset][$info['operator']]['#title'] = $info['label'];
    }
    $form['#info'] = array();
  }
}


/**
 * Helper function to refine $form array keys.
 *
 * @param $form
 *   The form array.
 *
 * @return
 *   An array containing the field key to be removed to a fieldset.
 */
function _views_exposed_in_fieldset_refine($form) {
  $form = element_children($form);
  return array_filter($form, '_views_exposed_in_fieldset_filter');
}


/**
 * Helper callback to remove necessary keys from a refined array.
 *
 * @param $array_value
 *   Input value to live or die!
 * 
 * @return
 *   Boolean value to filter and make a shiny new array.
 */
function _views_exposed_in_fieldset_filter($array_value) {
  $forbidden = array(
    'form_build_id',
    'form_token',
    'form_id',    
  );
  return !in_array($array_value, $forbidden);
}

